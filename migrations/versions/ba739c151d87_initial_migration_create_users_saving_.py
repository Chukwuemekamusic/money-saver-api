"""Initial migration: create users, saving_plans, and weekly_amounts tables

Revision ID: ba739c151d87
Revises: 
Create Date: 2025-08-06 01:16:28.152971

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ba739c151d87'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.String(length=36), nullable=False, comment='Supabase auth user UUID'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='User email address'),
    sa.Column('first_name', sa.String(length=100), nullable=False, comment='User first name'),
    sa.Column('last_name', sa.String(length=100), nullable=False, comment='User last name'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether user account is active'),
    sa.Column('provider', sa.String(length=50), nullable=True, comment='Authentication provider (email, google, etc.)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='User creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='User last update timestamp'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_users_created_at', 'users', ['created_at'], unique=False)
    op.create_index('idx_users_deleted_at', 'users', ['deleted_at'], unique=False)
    op.create_index('idx_users_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index('idx_users_provider', 'users', ['provider'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('saving_plans',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Saving plan unique identifier'),
    sa.Column('user_id', sa.String(length=36), nullable=False, comment='Reference to user who owns this saving plan'),
    sa.Column('savings_name', sa.String(length=200), nullable=False, comment='Name/description of the saving goal'),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Target amount to save'),
    sa.Column('number_of_weeks', sa.Integer(), nullable=False, comment='Number of weeks to complete the saving plan'),
    sa.Column('total_saved_amount', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Current total amount saved'),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Plan creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Plan last update timestamp'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp'),
    sa.CheckConstraint('amount > 0', name='ck_saving_plan_amount_positive'),
    sa.CheckConstraint('number_of_weeks <= 104', name='ck_saving_plan_weeks_max_2_years'),
    sa.CheckConstraint('number_of_weeks > 0', name='ck_saving_plan_weeks_positive'),
    sa.CheckConstraint('total_saved_amount <= amount', name='ck_saving_plan_total_saved_not_exceed_target'),
    sa.CheckConstraint('total_saved_amount >= 0', name='ck_saving_plan_total_saved_non_negative'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_saving_plans_deleted_at', 'saving_plans', ['deleted_at'], unique=False)
    op.create_index('idx_saving_plans_user_active', 'saving_plans', ['user_id', 'deleted_at'], unique=False)
    op.create_index('idx_saving_plans_user_created', 'saving_plans', ['user_id', 'date_created'], unique=False)
    op.create_index('idx_saving_plans_user_id', 'saving_plans', ['user_id'], unique=False)
    op.create_index(op.f('ix_saving_plans_user_id'), 'saving_plans', ['user_id'], unique=False)
    op.create_table('weekly_amounts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Weekly amount unique identifier'),
    sa.Column('saving_plan_id', sa.Integer(), nullable=False, comment='Reference to the saving plan'),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Amount to save for this week'),
    sa.Column('selected', sa.Boolean(), nullable=False, comment="Whether this week's amount has been saved"),
    sa.Column('week_index', sa.Integer(), nullable=True, comment='Week number in the saving plan (1-based)'),
    sa.Column('date_selected', sa.DateTime(timezone=True), nullable=True, comment="When this week's amount was marked as saved"),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Weekly amount creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Weekly amount last update timestamp'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp'),
    sa.CheckConstraint('amount > 0', name='ck_weekly_amount_positive'),
    sa.CheckConstraint('week_index > 0', name='ck_weekly_amount_week_index_positive'),
    sa.ForeignKeyConstraint(['saving_plan_id'], ['saving_plans.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_weekly_amounts_date_selected', 'weekly_amounts', ['date_selected'], unique=False)
    op.create_index('idx_weekly_amounts_deleted_at', 'weekly_amounts', ['deleted_at'], unique=False)
    op.create_index('idx_weekly_amounts_plan_week', 'weekly_amounts', ['saving_plan_id', 'week_index'], unique=False)
    op.create_index('idx_weekly_amounts_plan_week_unique', 'weekly_amounts', ['saving_plan_id', 'week_index'], unique=True)
    op.create_index('idx_weekly_amounts_saving_plan_id', 'weekly_amounts', ['saving_plan_id'], unique=False)
    op.create_index('idx_weekly_amounts_selected', 'weekly_amounts', ['selected'], unique=False)
    op.create_index(op.f('ix_weekly_amounts_saving_plan_id'), 'weekly_amounts', ['saving_plan_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_weekly_amounts_saving_plan_id'), table_name='weekly_amounts')
    op.drop_index('idx_weekly_amounts_selected', table_name='weekly_amounts')
    op.drop_index('idx_weekly_amounts_saving_plan_id', table_name='weekly_amounts')
    op.drop_index('idx_weekly_amounts_plan_week_unique', table_name='weekly_amounts')
    op.drop_index('idx_weekly_amounts_plan_week', table_name='weekly_amounts')
    op.drop_index('idx_weekly_amounts_deleted_at', table_name='weekly_amounts')
    op.drop_index('idx_weekly_amounts_date_selected', table_name='weekly_amounts')
    op.drop_table('weekly_amounts')
    op.drop_index(op.f('ix_saving_plans_user_id'), table_name='saving_plans')
    op.drop_index('idx_saving_plans_user_id', table_name='saving_plans')
    op.drop_index('idx_saving_plans_user_created', table_name='saving_plans')
    op.drop_index('idx_saving_plans_user_active', table_name='saving_plans')
    op.drop_index('idx_saving_plans_deleted_at', table_name='saving_plans')
    op.drop_table('saving_plans')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('idx_users_provider', table_name='users')
    op.drop_index('idx_users_email_active', table_name='users')
    op.drop_index('idx_users_deleted_at', table_name='users')
    op.drop_index('idx_users_created_at', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
